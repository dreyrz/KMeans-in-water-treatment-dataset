janitor::row_to_names(dados_na)
, header=TRUE
, header=TRUE
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=TRUE)
dados_na <- dados_brutos
janitor::row_to_names(dados_na)
library(janitor)
#Importando librarys
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(janitor)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=TRUE)
dados_na <- dados_brutos
janitor::row_to_names(dados_na)
View(dados_na)
#Base de dados
dados_brutos = read.table("water-treatment.data", header=TRUE)
View(dados_brutos)
#Base de dados
dados_brutos = read.table("water-treatment.data", fileEncoding="UTF-16", dec=",")
View(dados_brutos)
#Base de dados
dados_brutos = read.table("water-treatment.data", dec=",")
View(dados_brutos)
#Base de dados
dados_brutos = read.table("water-treatment.data", dec=",")
View(dados_brutos)
#Base de dados
dados_brutos = read.table("water-treatment.data", fileEncoding="UTF-16", dec=",")
#Base de dados
dados_brutos = read.csv("water-treatment.data", sep="\t", dec=",")
View(dados_brutos)
#Base de dados
dados_brutos = read.csv("water-treatment.data", sep="\t",)
View(dados_brutos)
#Base de dados
dados_brutos = read.csv("water-treatment.data", sep="\t", dec=",")
#Base de dados
f <-file("http://archive.ics.uci.edu/ml/machine-learning-databases/water-treatment/water-treatment.data", open="r" ,encoding="UTF-16LE")
dados_brutos <- read.table(f, dec=",", header=F)
dados_brutos <- read.table(f, dec=",", header=T)
#Base de dados
f <-file("http://archive.ics.uci.edu/ml/machine-learning-databases/water-treatment/water-treatment.data", open="r" ,encoding="UTF-16LE")
dados_brutos <- read.table(f, dec=",", header=T)
View(dados_na)
View(dados_brutos)
#Importando librarys
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=TRUE)
View(dados_brutos)
#Base de dados
dados_brutos = read.csv("water-treatment.data", dec = ",")
dados_na <- dados_brutos
View(dados_brutos)
#Base de dados
dados_brutos = read.csv("water-treatment.data", fileEncoding="UTF-16",dec = ",")
#Base de dados
dados_brutos = read.table("water-treatment.data", fileEncoding="UTF-16", dec = ",")
#Base de dados
dados_brutos = read.table("water-treatment.data", fileEncoding="UTF-16", dec=",")
#Base de dados
dados_brutos = read.table("water-treatment.data",  dec=",")
View(dados_brutos)
#Base de dados
dados_brutos = read.table("water-treatment.data", sep = "\t" dec=",")
#Base de dados
dados_brutos = read.table("water-treatment.data", sep = "\t", dec=",")
View(dados_brutos)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=TRUE)
View(dados_brutos)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=F)
View(dados_brutos)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
View(dados_brutos)
rm(list = ls())
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
dados_na <- dados_brutos
View(dados_na)
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
View(dados_na)
View(dados_na)
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Preechendo dados faltantes com a média
media = mean(df[, 7], na.rm = TRUE)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=F)
dados_na <- dados_brutos
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
#Verificando se há dados faltantes
any(is.na(dados_na))
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Preechendo dados faltantes com a média
media = mean(df[, 7], na.rm = TRUE)
#Preechendo dados faltantes com a média
for(i in 1:ncol(dados_na)){
dados_na[is.na(dados_na[,i]), i] <- mean(dados_na[,i], na.rm = TRUE)
}
warnings()
View(dados_na)
dados_na[is.na(dados_na[,i]), i] <- mean(dados_na[,i], na.rm = TRUE)
#Preechendo dados faltantes com a média
for(i in 1:ncol(dados_na)){
dados_na[is.na(dados_na[,i]), i] <- mean(dados_na[,i], na.rm = TRUE)
}
view(dados_na)
print(dados_na)
#Preechendo dados faltantes com a média
for(i in 1:nrow(dados_na)){
dados_na[is.na(dados_na[,i]), i] <- mean(dados_na[,i], na.rm = TRUE)
}
warnings()
#Importando librarys
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(imputeTS)
install.packages("imputeTS")
library(imputeTS)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=F)
dados_na <- dados_brutos
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
#Verificando se há dados faltantes
any(is.na(dados_na))
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Preechendo dados faltantes com a média
na_mean(dados_na)
warnings()
View(dados_na)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=F)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
#Verificando se há dados faltantes
any(is.na(dados_na))
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
View(dados_na)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
#Verificando se há dados faltantes
any(is.na(dados_na))
View(dados_na)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=TRUE)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
View(dados_na)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=F)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
#Verificando se há dados faltantes
any(is.na(dados_na))
View(dados_na)
View(dados_brutos)
View(dados_transpostos)
dados_na <- dados_na[-1,]
View(dados_na)
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
#Verificando se há dados faltantes
any(is.na(dados_na))
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Preechendo dados faltantes com a média
na_mean(dados_na)
warnings()
View(dados_transpostos)
View(dados_na)
#Preechendo dados faltantes com a média
na_mean(dados_na)
max.print
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
print(dados_faltantes_percent)
#Preechendo dados faltantes com a média
na_mean(dados_na)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=F)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
View(dados_brutos)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
View(dados_brutos)
View(dados_na)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
View(dados_na)
View(dados_brutos)
dados_na <- dados_transpostos
dados_na_minus_row <- dados_na[-1,]
View(dados_na_minus_row)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
View(dados_na)
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
#Verificando se há dados faltantes
any(is.na(dados_na))
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Preechendo dados faltantes com a média
na_mean(dados_na)
View(dados_na)
warnings()
library(hablar)
install.packages("hablar")
library(hablar)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=F)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
#Verificando se há dados faltantes
any(is.na(dados_na))
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Transformando dados para numericos
dados_na %>% retype()
#Preechendo dados faltantes com a média
na_mean(dados_na)
#Transformando dados para numericos
dados_na %>% retype()
View(dados_na)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=F)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
View(dados_na)
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
#Verificando se há dados faltantes
any(is.na(dados_na))
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
View(dados_na)
#Transformando dados para numericos
dados_na %>% retype()
View(dados_na)
#Transformando dados para numericos
dados_na %>% retype()
#Preechendo dados faltantes com a média
na_mean(dados_na)
warnings()
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Preechendo dados faltantes com a média
na_mean(dados_na)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=F,colClasses = "numeric")
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=F,colClasses = "numeric")
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T,colClasses = )
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
#Verificando se há dados faltantes
any(is.na(dados_na))
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Preechendo dados faltantes com a média
na_mean(dados_na)
warnings()
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T,colClasses = )
View(dados_brutos)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T,colClasses = "numeric" )
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
dados_na[] <- lapply(dados_na, function(x) {
if(is.factor(x)) as.numeric(as.character(x)) else x
})
sapply(dados_na, class)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
sapply(dados_na, class)
dados_na[] <- lapply(dados_na, function(x) {
if(is.factor(x)) as.numeric(as.character(x)) else x
})
sapply(dados_na, class)
dados_na[] <- lapply(dados_na, function(x) {
if(is.factor(x)) as.numeric(as.character(x)) else x
})
install.packages("dplyr")
ibrary(dplyr)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
#Importando librarys
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(imputeTS)
library(dplyr)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
#Verificando tipo dos dados
sapply(dados_na, class)
#Verificando tipo dos dados
sapply(dados_na, class)
#Convertendo dados
dados_convertidos_na <- mutate_all(dados_na, function(x) as.numeric(as.character(x)))
#Convertendo dados
dados_convertidos_na <- mutate_all(dados_na, function(x) as.numeric(as.character(x)))
#Importando librarys
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(imputeTS)
library(dplyr)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
#Verificando tipo dos dados
sapply(dados_na, class)
#Convertendo dados
dados_convertidos_na <- mutate_all(dados_na, function(x) as.numeric(as.character(x)))
#Convertendo dados
dados_convertidos_na <- dados_na(apply(df1, 2, function(x) as.numeric(as.character(x))))
#Convertendo dados
dados_convertidos_na <- dados_na.frame(apply(df1, 2, function(x) as.numeric(as.character(x))))
#Verificando tipo dos dados
sapply(dados_na, class)
#Convertendo dados
dados_convertidos_na <- dados_na.frame(apply(df1, 2, function(x) as.numeric(as.character(x))))
#Convertendo dados
dados_convertidos_na <- data.frame(apply(dados_na, 2, function(x) as.numeric(as.character(x))))
sapply(dados_na, class)
View(dados_na)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
#Verificando tipo dos dados
sapply(dados_na, class)
#Convertendo dados
dados_convertidos_na <- data.frame(apply(dados_na, 2, function(x) as.numeric(as.character(x))))
warnings()
View(dados_na)
#Base de dados
dados_brutos = read.csv("water-treatment.data", header=T)
dados_transpostos = t(dados_brutos)
dados_na <- dados_transpostos
dados_na <- dados_na[-1,]
#Encontrando variáveis com "?"
idx <- dados_na == "?"
#Substituindo variáveis com "?"
is.na(dados_na) <- idx
View(dados_na)
#Verificando tipo dos dados
sapply(dados_na, class)
#Convertendo dados
dados_convertidos_na <- data.frame(apply(dados_na, 2, function(x) as.numeric(as.character(x))))
sapply(dados_na, class)
#Convertendo dados
dados_convertidos_na <- data.frame(apply(dados_na, 2, function(x) as.numeric(as.character(x))))
#Convertendo dados
dados_convertidos_na <- data.frame(apply(dados_na, 2, function(x) as.numeric(as.character(x))))
sapply(dados_convertidos_na, class)
#Verificando se há dados faltantes
any(is.na(dados_na))
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_na))*100/nrow(dados_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Preechendo dados faltantes com a média
na_mean(dados_na)
#Verificando se há dados faltantes
any(is.na(dados_convertidos_na))
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_convertidos_na))*100/nrow(dados_convertidos_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Preechendo dados faltantes com a média
na_mean(dados_convertidos_na)
View(dados_convertidos_na)
View(dados_na)
#Percentual de dados faltantes
dados_faltantes_percent <- round(colSums(is.na(dados_convertidos_na))*100/nrow(dados_convertidos_na),2)
dados_faltantes_percent[dados_faltantes_percent>0]
#Preechendo dados faltantes com a média
na_mean(dados_convertidos_na)
dados_faltantes_percent[dados_faltantes_percent>0]
#Preechendo dados faltantes com a média
data <- (dados_convertidos_na)
View(data)
#Definir a quantidade otima de cluster
fviz_nbclust(dados_na, kmeans, method = "silhouette" )
#Preechendo dados faltantes com a média
data <- na_mean(dados_convertidos_na)
View(data)
#Definir a quantidade otima de cluster
fviz_nbclust(dados_na, kmeans, method = "silhouette" )
#Definir a quantidade otima de cluster
fviz_nbclust(dados_na, kmeans, method = "silhouette" )
#Definir a quantidade otima de cluster
fviz_nbclust(data, kmeans, method = "silhouette" )
#Gerar o kmeans
dados_kmeans <- kmeans(data, 2)
#Visualizar o kmeans
fviz_cluster(dados_kmeans, data=data)
#Preechendo dados faltantes com a média
data <- na_mean(dados_convertidos_na)
#Definir a quantidade ótima de clusters
fviz_nbclust(data, kmeans, method = "silhouette" )
#Gerar o kmeans
dados_kmeans <- kmeans(data, 2)
dados_brutos
#Gerar o kmeans
dados_kmeans <- kmeans(dados_brutos, 2)
data, 2
#Gerar o kmeans
dados_kmeans <- kmeans(data, 2)
#Gerar o kmeans
dados_kmeans <- kmeans(dados_brutos, 2)
#Gerar o kmeans
dados_kmeans <- kmeans(dados, 2)
#Visualizar o kmeans
fviz_cluster(dados_kmeans, data=data)
